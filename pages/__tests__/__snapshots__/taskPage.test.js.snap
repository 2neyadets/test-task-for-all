// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TaskPage component match snapshot 1`] = `
<div
  class="task-description pa-sm"
>
  <p>
    Средствами Vue.js реализуйте небольшое приложение для заметок.
  </p>
  <br />
  <p>
    Каждая заметка имеет название и список задач (todo list), далее - Todo. Каждый пункт Todo состоит из чекбокса и относящейся к нему текстовой подписи.
  </p>
  <br />
  <p>
    Приложение состоит всего из 2х страниц.
  </p>
  <br />
  <p>
    На главной странице отображается список всех заметок. Для каждой заметки отображается заголовок и Todo, сокращенный до нескольких пунктов, без возможности отмечать.
  </p>
  <p>
    Действия на главной:
  </p>
  <p>
    - перейти к созданию новой заметки
  </p>
  <p>
    - перейти к изменению
  </p>
  <p>
    - удалить (необходимо подтверждение)
  </p>
  <br />
  <p>
    Страница изменения заметки позволяет определенную заметку отредактировать, отметить пункты Todo, а после сохранить изменения.
  </p>
  <p>
    Действия с заметкой:
  </p>
  <p>
    - сохранить изменения
  </p>
  <p>
    - отменить редактирование (необходимо подтверждение)
  </p>
  <p>
    - удалить (необходимо подтверждение)
  </p>
  <p>
    - отменить внесенное изменение
  </p>
  <p>
    - повторить отмененное изменение
  </p>
  <p>
    Действия с пунктами Todo:
  </p>
  <p>
    - добавить
  </p>
  <p>
    - удалить
  </p>
  <p>
    - отредактировать текст
  </p>
  <p>
    - отметить как выполненный
  </p>
  <br />
  <p>
    Требования к функционалу:
  </p>
  <p>
    - Все действия на сайте должны происходить без перезагрузки страницы.
  </p>
  <p>
    - Подтверждение действий (удалить заметку) выполняется с помощью диалогового окна.
  </p>
  <p>
    - Интерфейс должен отвечать требованиям usability.
  </p>
  <p>
    - После перезагрузки страницы состояние списка заметок должно сохраняться.
  </p>
  <p>
    - Можно пренебречь несоответствием редактирования текста с помощью кнопок отменить/повторить и аналогичным действиям с помощью комбинацияй клавиш (Ctrl+Z, Command+Z, etc.).
  </p>
  <br />
  <p>
    Технические требования:
  </p>
  <p>
    - Диалоговые окна должны быть реализованы без использования "alert", "prompt" и "confirm".
  </p>
  <p>
    - В качестве языка разработки допускается использовать JavaScript или TypeScript.
  </p>
  <p>
    - В качестве сборщика, если это необходимо, используйте Webpack.
  </p>
  <p>
    - Верстка должна быть выполнена без использования UI библиотек (например Vuetify).
  </p>
  <p>
    - Адаптивность не обязательна, но приветствуется.
  </p>
  <p>
    - Логика приложения должна быть разбита на разумное количество самодостаточных Vue-компонентов.
  </p>
  <br />
  <p>
    Особое внимание стоит обратить на следующие моменты:
  </p>
  <p>
    - Код должен быть написан понятно и аккуратно, с соблюдением табуляции и прочих элементов написания, без лишних элементов и функций, не имеющих отношения к функционалу тестового задания, снабжен понятными комментариями.
  </p>
  <p>
    - Читабельность и наличие элементарной архитектуры.
  </p>
  <p>
    - Чистота и оформление кода — не менее важный фактор. Код должен быть написан в едином стиле (желательно в рекомендуемом для конкретного языка). Также к чистоте относятся отсутствие копипаста и дублирования логики.
  </p>
  <br />
  <p>
    Тестовое задание должно быть предоставлено в следующем виде:
  </p>
  <p>
    - Ссылка на публичный репозиторий (GitHub, BitBucket, GitLab) с исходным кодом.
  </p>
  <p>
    - Ссылка на сайт для тестирования функционала. Или Dockerfile и docker-compose.yaml, позволяющие развернуть локально командой docker-compose up работоспособную копию сайта.
  </p>
</div>
`;
